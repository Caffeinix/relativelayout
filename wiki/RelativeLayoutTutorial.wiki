#summary A simple tutorial showing how to use RelativeLayout to build an interface.

= Introduction =

There are three ways to use RelativeLayout; some of them are simpler, while others offer more flexibility for more complex interfaces.  This tutorial will show you how to build a simple interface using [BindingFactory], a slightly more interesting interface using [Binding]s, and a complex interface using [RelativePosition]s and [Binding]s together.

= General Principles =

== Construction ==

RelativeLayout is a Swing layout manager, which means it follows certain conventions that are common to layout managers in Swing.  In particular, you can set a RelativeLayout as the layout manager for a control by passing a new RelativeLayout object as the parameter to a !JPanel or !JFrame constructor, or by calling `setLayout()` with a RelativeLayout as the parameter on any Container class.  For example:

{{{
// Passing a RelativeLayout in the constructor:
JPanel panel = new JPanel(new RelativeLayout());

// Setting a RelativeLayout as the layout after construction:
JPanel anotherPanel = new JPanel();
anotherPanel.setLayout(new RelativeLayout());
}}}

== Constraints ==

When you add a component to a container in Swing, the `add()` method can take as a parameter an additional arbitrary object which is passed to the layout manager to determine how the added component should be laid out.  This object is typically referred to as the "constraints" for the component.  RelativeLayout uses a constraints object called a RelativeConstraints, which should be added along with each component that is added to the layout.  For example:

{{{
// First we create our panel with a RelativeLayout:
JPanel panel = new JPanel(new RelativeLayout());

// Now let's create a button:
JButton button = new JButton("OK");

// We have to create a RelativeConstraints object so we can add the button.
// This particular constraints object is empty, so it's not very interesting.
RelativeConstraints constraints = new RelativeConstraints();

// Add the button to the panel with the constraints:
panel.add(button, constraints);
}}}

RelativeConstraints objects are just sets of [Binding]s, which actually determine where a component appears inside its parent.  There are several ways of creating and using bindings, and creating bindings is what the rest of this tutorial is about.

= BindingFactory =

The simplest way to create an interface with RelativeLayout is to use the BindingFactory class to generate bindings for you.  Doing this is pretty straightforward; just create a BindingFactory object, specify the margin sizes and control spacing you want (or just accept the defaults), and then call the various positioning methods to churn out Bindings.  For example, let's say we want to create this very simple interface:



We can do this with BindingFactory with the following code (note that in this example, we sacrifice brevity for clarity, so this is a lot more code than you'd actually have to write for this):

{{{
JPanel panel = new JPanel(new RelativeLayout());

JButton button1 = new JButton("Button 1");
JButton button2 = new JButton("Button 2");

// Create a BindingFactory with the default margin and control spacing:
BindingFactory bf = new BindingFactory();

// Make some bindings using our BindingFactory.  Note how leftEdge() and topEdge() don't 
// take any arguments, but rightOf() needs the control we want to be to the right of.
Binding leftEdge = bf.leftEdge();
Binding topEdge = bf.topEdge();
Binding rightOfButton1 = bf.rightOf(button1);

// Create a constraints object for each component, and add the bindings to the 
// constraints:
RelativeConstraints button1Constraints = new RelativeConstraints();
button1Constraints.addBinding(leftEdge);
button1Constraints.addBinding(topEdge);

RelativeConstraints button2Constraints = new RelativeConstraints();
button2Constraints.addBinding(rightOfButton1);
button2Constraints.addBinding(topEdge);

// Lastly, add the components to the panel with the constraints:
panel.add(button1, button1Constraints);
panel.add(button2, button2Constraints);
}}}

}}}